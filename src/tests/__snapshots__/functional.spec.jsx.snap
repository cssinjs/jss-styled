// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functional tests Compose React Components should escape name in dev mode 1`] = `
".\\\\(Comp\\\\.name\\\\)-1-id {
  color: red;
}"
`;

exports[`functional tests Compose React Components should pass props 1`] = `
<StyledElement
  className="testClassName"
  testProp={1}
  testProp2="2"
>
  <Component
    className="StyledElement-1-id testClassName"
    testProp={1}
    testProp2="2"
  >
    {"testProp":1,"testProp2":"2","className":"StyledElement-1-id testClassName"}
  </Component>
</StyledElement>
`;

exports[`functional tests Compose React Components should pass props 2`] = `
".StyledElement-1-id {
  padding: 10px;
}"
`;

exports[`functional tests Compose React Components should use .displayName 1`] = `
<StyledElement>
  <TestDisplayName
    className="TestDisplayName-1-id"
  >
    <h1
      className="TestDisplayName-1-id"
    >
      test
    </h1>
  </TestDisplayName>
</StyledElement>
`;

exports[`functional tests Compose React Components should use .displayName 2`] = `
".TestDisplayName-1-id {
  padding: 10px;
}"
`;

exports[`functional tests Compose React Components should use .name 1`] = `
<StyledElement>
  <Test
    className="Test-1-id"
  >
    <h1
      className="Test-1-id"
    >
      test
    </h1>
  </Test>
</StyledElement>
`;

exports[`functional tests Compose React Components should use .name 2`] = `
".Test-1-id {
  padding: 10px;
}"
`;

exports[`functional tests Compose React Components should use .name 3`] = `
<StyledElement>
  <Component
    className="StyledElement-1-id"
  >
    <h1
      className="StyledElement-1-id"
    >
      test
    </h1>
  </Component>
</StyledElement>
`;

exports[`functional tests Compose React Components should use .name 4`] = `
".StyledElement-1-id {
  padding: 10px;
}"
`;

exports[`functional tests Observables should use observable value 1`] = `
".div-1-id {
  padding: 40px;
  text-align: center;
}
.div-2-id {
  height: 10px;
}"
`;

exports[`functional tests composable styles should compose all function styles 1`] = `
".button-1-id {
  color: red;
  background-color: green;
  margin: 20px;
  padding: 20px;
}"
`;

exports[`functional tests composable styles should compose all function styles 2`] = `
".button-1-id {
  color: white;
  background-color: black;
  margin: 20px;
  padding: 20px;
}"
`;

exports[`functional tests composable styles should merge all object styles 1`] = `
".button-1-id {
  margin: 10px;
  padding: 20px;
}
.button-2-id {
  color: red;
  background-color: green;
}"
`;

exports[`functional tests composable styles should merge and compose all styles 1`] = `
<StyledElement
  round={true}
  theme="action"
>
  <button
    className="button-1-id button-2-id button-3-id"
  />
</StyledElement>
`;

exports[`functional tests composable styles should merge and compose all styles 2`] = `
".button-1-id {
  margin: 20px;
  padding: 20px;
}
.button-2-id {
  font-weight: 400;
}
.button-3-id {
  border-radius: 100%;
  color: red;
  background-color: green;
}"
`;

exports[`functional tests composable styles should merge and compose all styles 3`] = `
".button-1-id {
  margin: 20px;
  padding: 20px;
}
.button-2-id {
  font-weight: 400;
  font-size: 15px;
}
.button-3-id {
  color: black;
  background-color: white;
}"
`;

exports[`functional tests should update dynamic props for conditional rules 1`] = `
".button-1-id {
  padding: 10px;
}
@media screen {
  .button-1-id {
  }
  .button-1-id .button {
    margin: 10px;
  }
}"
`;

exports[`functional tests should update dynamic props for conditional rules 2`] = `
".button-1-id {
  padding: 0;
}
@media screen {
  .button-1-id {
  }
  .button-1-id .button {
    margin: 0;
  }
}"
`;

exports[`functional tests should update nested props 1`] = `
".button-id {
  font-size: 12px;
}
.div-1-id {
  padding: 15px;
}
.div-3-id {
}
.div-3-id:hover {
}
.div-3-id:hover .button-id {
  color: green;
}
.button-2-id {
}
.div-4-id {
}
.div-4-id:hover {
}
.div-4-id:hover .button-id {
  color: red;
}"
`;

exports[`functional tests should update nested props 2`] = `
".button-id {
  font-size: 12px;
}
.div-1-id {
  padding: 15px;
}
.div-3-id:hover .button-id {
  color: red;
}
.div-4-id:hover .button-id {
  color: green;
}"
`;

exports[`functional tests should update props and unmount 1`] = `
".div-1-id {
  margin: 50px;
}
.header-2-id {
  padding: 10px;
}
.h1-5-id {
  color: red;
}
.section-3-id {
  color: red;
}
.button-6-id {
  margin: 0;
}
.button-7-id {
  margin: 10px;
}
.section-4-id {
  color: yellow;
}"
`;

exports[`functional tests should update props and unmount 2`] = `
".div-1-id {
  margin: 50px;
}
.header-2-id {
  padding: 10px;
}
.h1-5-id {
  color: red;
}
.section-3-id {
  color: red;
}
.button-6-id {
  margin: 0;
}
.button-7-id {
  margin: 20px;
}
.section-4-id {
  color: yellow;
}"
`;

exports[`functional tests should use Styled Component classname in string 1`] = `
<StyledElement>
  <div
    className="div-4-id"
  >
    <StyledElement>
      <div
        className="static-2-id div-1-id"
      >
        name
      </div>
    </StyledElement>
    <StyledElement
      width={30}
    >
      <img
        className="static-3-id img-5-id"
        width={30}
      />
    </StyledElement>
  </div>
</StyledElement>
`;

exports[`functional tests should use Styled Component classname in string 2`] = `
".div-4-id {
}
.div-4-id:not(:first-child) .static-2-id {
  display: none;
}
.div-4-id:not(:last-child) .static-3-id {
  visibility: hidden;
}
.div-4-id .static-2-id {
  color: green;
}
.div-1-id {
  color: red;
}
.img-5-id {
  width: 30px;
}"
`;

exports[`functional tests should use props on remount 1`] = `
".button-1-id {
  color: black;
}"
`;

exports[`functional tests should use props on remount 2`] = `
".button-2-id {
  color: red;
}"
`;

exports[`functional tests theming should update theme 1`] = `
".button-1-id {
  color: green;
  background-color: white;
}"
`;

exports[`functional tests theming should update theme 2`] = `
".button-1-id {
  color: yellow;
  background-color: blue;
}"
`;

exports[`functional tests theming should work with ThemeProvider 1`] = `
".button-1-id {
  color: green;
  background-color: white;
}"
`;

exports[`functional tests theming should work with nested ThemeProvider 1`] = `
".button-1-id {
  color: green;
  background-color: white;
}
.button-2-id {
  color: blue;
  background-color: yellow;
}"
`;
